apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: grafana-agent
  namespace: flux-system
spec:
  interval: 5m
  url: https://grafana.github.io/helm-charts
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: snmp-config
  namespace: monitor
data:
  snmp.yaml: |
    # WARNING: This file was auto-generated using snmp_exporter generator, manual changes will be lost.
    auths:
      public:
        community: public
        security_level: noAuthNoPriv
        auth_protocol: MD5
        priv_protocol: DES
        version: 2
    modules:
      ubnt:
        walk:
        - 1.3.6.1.2.1.31.1.1.1.1
        - 1.3.6.1.2.1.31.1.1.1.10
        - 1.3.6.1.2.1.31.1.1.1.15
        - 1.3.6.1.2.1.31.1.1.1.6
        get:
        - 1.3.6.1.2.1.25.1.1.0
        - 1.3.6.1.4.1.2021.11.50.0
        - 1.3.6.1.4.1.2021.11.51.0
        - 1.3.6.1.4.1.2021.11.52.0
        - 1.3.6.1.4.1.2021.11.53.0
        - 1.3.6.1.4.1.2021.11.54.0
        - 1.3.6.1.4.1.2021.11.55.0
        - 1.3.6.1.4.1.2021.11.56.0
        - 1.3.6.1.4.1.2021.4.11.0
        - 1.3.6.1.4.1.2021.4.12.0
        - 1.3.6.1.4.1.2021.4.13.0
        - 1.3.6.1.4.1.2021.4.14.0
        - 1.3.6.1.4.1.2021.4.15.0
        - 1.3.6.1.4.1.2021.4.3.0
        - 1.3.6.1.4.1.2021.4.4.0
        - 1.3.6.1.4.1.2021.4.5.0
        - 1.3.6.1.4.1.2021.4.6.0
        metrics:
        - name: hrSystemUptime
          oid: 1.3.6.1.2.1.25.1.1
          type: gauge
          help: The amount of time since this host was last initialized - 1.3.6.1.2.1.25.1.1
        - name: ifHCOutOctets
          oid: 1.3.6.1.2.1.31.1.1.1.10
          type: counter
          help: The total number of octets transmitted out of the interface, including
            framing characters - 1.3.6.1.2.1.31.1.1.1.10
          indexes:
          - labelname: ifIndex
            type: gauge
          lookups:
          - labels:
            - ifIndex
            labelname: ifName
            oid: 1.3.6.1.2.1.31.1.1.1.1
            type: DisplayString
        - name: ifHighSpeed
          oid: 1.3.6.1.2.1.31.1.1.1.15
          type: gauge
          help: An estimate of the interface's current bandwidth in units of 1,000,000
            bits per second - 1.3.6.1.2.1.31.1.1.1.15
          indexes:
          - labelname: ifIndex
            type: gauge
          lookups:
          - labels:
            - ifIndex
            labelname: ifName
            oid: 1.3.6.1.2.1.31.1.1.1.1
            type: DisplayString
        - name: ifHCInOctets
          oid: 1.3.6.1.2.1.31.1.1.1.6
          type: counter
          help: The total number of octets received on the interface, including framing
            characters - 1.3.6.1.2.1.31.1.1.1.6
          indexes:
          - labelname: ifIndex
            type: gauge
          lookups:
          - labels:
            - ifIndex
            labelname: ifName
            oid: 1.3.6.1.2.1.31.1.1.1.1
            type: DisplayString
        - name: ssCpuRawUser
          oid: 1.3.6.1.4.1.2021.11.50
          type: counter
          help: The number of 'ticks' (typically 1/100s) spent processing user-level code
            - 1.3.6.1.4.1.2021.11.50
        - name: ssCpuRawNice
          oid: 1.3.6.1.4.1.2021.11.51
          type: counter
          help: The number of 'ticks' (typically 1/100s) spent processing reduced-priority
            code - 1.3.6.1.4.1.2021.11.51
        - name: ssCpuRawSystem
          oid: 1.3.6.1.4.1.2021.11.52
          type: counter
          help: The number of 'ticks' (typically 1/100s) spent processing system-level
            code - 1.3.6.1.4.1.2021.11.52
        - name: ssCpuRawIdle
          oid: 1.3.6.1.4.1.2021.11.53
          type: counter
          help: The number of 'ticks' (typically 1/100s) spent idle - 1.3.6.1.4.1.2021.11.53
        - name: ssCpuRawWait
          oid: 1.3.6.1.4.1.2021.11.54
          type: counter
          help: The number of 'ticks' (typically 1/100s) spent waiting for IO - 1.3.6.1.4.1.2021.11.54
        - name: ssCpuRawKernel
          oid: 1.3.6.1.4.1.2021.11.55
          type: counter
          help: The number of 'ticks' (typically 1/100s) spent processing kernel-level
            code - 1.3.6.1.4.1.2021.11.55
        - name: ssCpuRawInterrupt
          oid: 1.3.6.1.4.1.2021.11.56
          type: counter
          help: The number of 'ticks' (typically 1/100s) spent processing hardware interrupts
            - 1.3.6.1.4.1.2021.11.56
        - name: memTotalFree
          oid: 1.3.6.1.4.1.2021.4.11
          type: gauge
          help: The total amount of memory free or available for use on this host - 1.3.6.1.4.1.2021.4.11
        - name: memMinimumSwap
          oid: 1.3.6.1.4.1.2021.4.12
          type: gauge
          help: The minimum amount of swap space expected to be kept free or available
            during normal operation of this host - 1.3.6.1.4.1.2021.4.12
        - name: memShared
          oid: 1.3.6.1.4.1.2021.4.13
          type: gauge
          help: The total amount of real or virtual memory currently allocated for use
            as shared memory - 1.3.6.1.4.1.2021.4.13
        - name: memBuffer
          oid: 1.3.6.1.4.1.2021.4.14
          type: gauge
          help: The total amount of real or virtual memory currently allocated for use
            as memory buffers - 1.3.6.1.4.1.2021.4.14
        - name: memCached
          oid: 1.3.6.1.4.1.2021.4.15
          type: gauge
          help: The total amount of real or virtual memory currently allocated for use
            as cached memory - 1.3.6.1.4.1.2021.4.15
        - name: memTotalSwap
          oid: 1.3.6.1.4.1.2021.4.3
          type: gauge
          help: The total amount of swap space configured for this host. - 1.3.6.1.4.1.2021.4.3
        - name: memAvailSwap
          oid: 1.3.6.1.4.1.2021.4.4
          type: gauge
          help: The amount of swap space currently unused or available. - 1.3.6.1.4.1.2021.4.4
        - name: memTotalReal
          oid: 1.3.6.1.4.1.2021.4.5
          type: gauge
          help: The total amount of real/physical memory installed on this host. - 1.3.6.1.4.1.2021.4.5
        - name: memAvailReal
          oid: 1.3.6.1.4.1.2021.4.6
          type: gauge
          help: The amount of real/physical memory currently unused or available. - 1.3.6.1.4.1.2021.4.6
---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: grafana-agent
  namespace: flux-system
spec:
  chart:
    spec:
      chart: grafana-agent
      version: 0.38.0
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        name: grafana-agent
        namespace: flux-system
  install:
    createNamespace: true
  interval: 1m0s
  releaseName: grafana-agent
  targetNamespace: monitor
  values:
    nameOverride: grafana-agent

    ingress:
      enabled: true
      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        cert-manager.io/cluster-issuer: "cert-zhaohai-li-dns"
      hosts:
      - collector-p.zhaohai.li
      faroPort: 80
      tls:
      - hosts:
        - "zhaohai.li"
        - "*.zhaohai.li"
        secretName: tls-zhaohai-li-ingress-dns
    crds:
      create: true
    rbac:
      create: true
    serviceAccount:
      create: true
    configReloader:
      enabled: true
    controller:
      type: 'daemonset'
      replicas: 1
      volumes:
        extra:
        - name: conf
          configMap:
            name: snmp-config
    service:
      enabled: true
    serviceMonitor:
      enabled: false

    agent:
      mode: 'flow'
      mounts:
        varlog: true
        extra:
        - name: conf
          mountPath: /etc/snmp_conf
          readOnly: true
      configMap:
        create: true
        content: |
          logging {
            level  = "info"
            format = "logfmt"
          }

          prometheus.remote_write "default" {
            endpoint {
              url = "http://prometheus.monitor.svc.cluster.local:9090/api/v1/write"
            }
          }

          // discovery rules
          discovery.kubernetes "pods" {
            role = "pod"
          }

          discovery.kubernetes "services" {
            role = "service"
          }

          discovery.kubernetes "endpoints" {
            role = "endpoints"
          }

          discovery.kubernetes "endpointslices" {
            role = "endpointslice"
          }

          discovery.kubernetes "ingresses" {
            role = "ingress"
          }

          discovery.kubernetes "nodes" {
            role = "node"
          }

          // cadvisor
          discovery.relabel "cadvisor" {
            targets = discovery.kubernetes.nodes.targets

            rule {
              action = "replace"
              target_label = "__address__"
              replacement = "kubernetes.default.svc.cluster.local:443"
            }

            rule {
              source_labels = ["__meta_kubernetes_node_name"]
              regex = "(.+)"
              action = "replace"
              replacement = "/api/v1/nodes/${1}/proxy/metrics/cadvisor"
              target_label = "__metrics_path__"
            }

            rule {
              source_labels = ["__meta_kubernetes_node_name"]
              target_label  = "k8s_node_name"
            }
          }

          prometheus.scrape "cadvisor" {
            scheme = "https"
            tls_config {
                server_name = "kubernetes"
                ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
                insecure_skip_verify = false
            }
            bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
            targets = discovery.relabel.cadvisor.output
            scrape_interval = "30s"
            forward_to = [prometheus.remote_write.default.receiver]
          }

          // kubelet
          discovery.relabel "kubelet" {
            targets = discovery.kubernetes.nodes.targets

            rule {
              action = "replace"
              target_label = "__address__"
              replacement = "kubernetes.default.svc.cluster.local:443"
            }

            rule {
              source_labels = ["__meta_kubernetes_node_name"]
              regex = "(.+)"
              action = "replace"
              replacement = "/api/v1/nodes/${1}/proxy/metrics"
              target_label = "__metrics_path__"
            }

            rule {
              source_labels = ["__meta_kubernetes_node_name"]
              target_label  = "k8s_node_name"
            }
          }

          prometheus.scrape "kubelet" {
            scheme = "https"
            tls_config {
                server_name = "kubernetes"
                ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
                insecure_skip_verify = false
            }
            bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
            targets = discovery.relabel.kubelet.output
            scrape_interval = "30s"
            forward_to = [prometheus.remote_write.default.receiver]
          }

          // localhost
          prometheus.scrape "localhost" {
            targets = [
              {
                "__address__"   = "nas.local:9100",
                "instance"      = "nas",
                "k8s_node_name" = "nas",
              },
            ]

            scrape_interval = "30s"
            forward_to = [prometheus.remote_write.default.receiver]
          }

          // smartctl
          prometheus.scrape "smartctl" {
            targets = [
              {
                "__address__"   = "nas.local:9633",
                "instance"      = "nas",
                "k8s_node_name" = "nas",
              },
            ]

            scrape_interval = "60s"
            forward_to = [prometheus.remote_write.default.receiver]
          }

          // edgerouterx
          prometheus.exporter.snmp "erx" {
            config_file = "/etc/snmp_conf/snmp.yaml"

            target "erx" {
              address = "router.local"
              module  = "ubnt"
              auth    = "public"
            }
          }

          prometheus.scrape "erx" {
            targets         = prometheus.exporter.snmp.erx.targets
            scrape_interval = "30s"
            forward_to      = [prometheus.relabel.erx.receiver]
          }

          prometheus.relabel "erx" {
            forward_to     = [prometheus.remote_write.default.receiver]

            rule {
              target_label = "instance"
              replacement  = "erx"
            }
          }

          // logging
          discovery.relabel "logs" {
            targets = discovery.kubernetes.pods.targets

            rule {
              source_labels = ["__meta_kubernetes_namespace"]
              target_label  = "k8s_namespace_name"
            }

            rule {
              source_labels = ["__meta_kubernetes_pod_node_name"]
              target_label  = "k8s_node_name"
            }

            rule {
              source_labels = ["__meta_kubernetes_pod_controller_kind"]
              target_label  = "k8s_controller_kind"
            }

            rule {
              source_labels = ["__meta_kubernetes_pod_controller_name"]
              target_label  = "k8s_controller_name"
            }

            rule {
              source_labels = ["__meta_kubernetes_pod_controller_kind", "__meta_kubernetes_pod_controller_name"]
              separator     = ";"
              regex         = "(.*);(.*)"
              target_label  = to_lower("k8s_${1}_name")
              replacement   = "${2}"
            }

            rule {
              source_labels = ["__meta_kubernetes_pod_name"]
              target_label  = "k8s_pod_name"
            }

            rule {
              source_labels = ["__meta_kubernetes_pod_container_name"]
              target_label  = "k8s_container_name"
            }

            rule {
              source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_name", "__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
              separator     = ";"
              regex         = "(.*);(.*);(.*);(.*)"
              replacement   = "/var/log/pods/${1}_${2}_${3}/${4}/*.log"
              target_label  = "__path__"
            }
          }

          local.file_match "logs" {
            path_targets = discovery.relabel.logs.output
          }

          loki.source.file "pods" {
            targets    = local.file_match.logs.targets
            forward_to = [loki.process.logs.receiver]
          }

          loki.process "logs" {
            stage.cri {}
            forward_to = [loki.write.local.receiver]
          }

          loki.source.kubernetes_events "events" {
            log_format = "json"
            forward_to = [loki.write.local.receiver]
          }

          loki.write "local" {
            endpoint {
              url = "http://loki.monitor.svc.cluster.local:3100/loki/api/v1/push"
            }
          }

